{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6142327,"sourceType":"datasetVersion","datasetId":3522171},{"sourceId":9035909,"sourceType":"datasetVersion","datasetId":5446736}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\nimport joblib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the Dataset\nfile_path = '/kaggle/input/iotintrusion/IoT_Intrusion.csv'  # Correct the file path\n\ntry:\n    df = pd.read_csv(file_path)\n    print(\"Dataset loaded successfully!\")\nexcept FileNotFoundError:\n    print(f\"File not found at {file_path}. Please check the file path.\")\n    raise\n\n# Handle missing values, if any\ndf.dropna(inplace=True)\n\n# Check the column names\nprint(\"\\nColumn Names:\")\nprint(df.columns)\n\n# Split the data into features and target\ntarget_column = 'label'\nX = df.drop(target_column, axis=1)\ny = df[target_column]\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize the RandomForestClassifier\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Train the model\nrf_model.fit(X_train, y_train)\n\n# Make predictions\ny_pred = rf_model.predict(X_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(f'Random Forest Accuracy: {accuracy:.2f}')\nprint(classification_report(y_test, y_pred))\n\n# Confusion Matrix\ncm = confusion_matrix(y_test, y_pred, labels=rf_model.classes_)\nplt.figure(figsize=(10, 7))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=rf_model.classes_, yticklabels=rf_model.classes_)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix')\nplt.show()\n\n# Save the trained model to a file\njoblib.dump(rf_model, 'rf_intrusion_detection_model.pkl')\nprint(\"Random Forest Model saved as 'rf_intrusion_detection_model.pkl'\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Creating a small dataset with the expected feature names\ndata = {\n    'flow_duration': [1, 2, 3, 4, 5],\n    'Header_Length': [10, 20, 30, 40, 50],\n    'Protocol Type': [1, 2, 1, 2, 1],\n    'Duration': [100, 200, 300, 400, 500],\n    'Rate': [0.1, 0.2, 0.3, 0.4, 0.5],\n    'Srate': [0.05, 0.06, 0.07, 0.08, 0.09],\n    'Drate': [0.01, 0.02, 0.03, 0.04, 0.05],\n    'fin_flag_number': [0, 1, 0, 1, 0],\n    'syn_flag_number': [1, 0, 1, 0, 1],\n    'rst_flag_number': [0, 0, 1, 1, 0],\n    'psh_flag_number': [1, 1, 0, 0, 1],\n    'ack_flag_number': [0, 1, 0, 1, 0],\n    'ece_flag_number': [0, 1, 0, 1, 0],\n    'cwr_flag_number': [1, 0, 1, 0, 1],\n    'ack_count': [10, 20, 30, 40, 50],\n    'syn_count': [5, 6, 7, 8, 9],\n    'fin_count': [0, 1, 0, 1, 0],\n    'urg_count': [0, 0, 1, 1, 0],\n    'rst_count': [1, 0, 1, 0, 1],\n    'HTTP': [0, 1, 0, 1, 0],\n    'HTTPS': [1, 0, 1, 0, 1],\n    'DNS': [0, 1, 0, 1, 0],\n    'Telnet': [1, 0, 1, 0, 1],\n    'SMTP': [0, 1, 0, 1, 0],\n    'SSH': [1, 0, 1, 0, 1],\n    'IRC': [0, 1, 0, 1, 0],\n    'TCP': [1, 0, 1, 0, 1],\n    'UDP': [0, 1, 0, 1, 0],\n    'DHCP': [1, 0, 1, 0, 1],\n    'ARP': [0, 1, 0, 1, 0],\n    'ICMP': [1, 0, 1, 0, 1],\n    'IPv': [0, 1, 0, 1, 0],\n    'LLC': [1, 0, 1, 0, 1],\n    'Tot sum': [100, 200, 300, 400, 500],\n    'Min': [10, 20, 30, 40, 50],\n    'Max': [1000, 2000, 3000, 4000, 5000],\n    'AVG': [100, 200, 300, 400, 500],\n    'Std': [10, 20, 30, 40, 50],\n    'Tot size': [1000, 2000, 3000, 4000, 5000],\n    'IAT': [0.1, 0.2, 0.3, 0.4, 0.5],\n    'Number': [1, 2, 3, 4, 5],\n    'Magnitue': [10, 20, 30, 40, 50],\n    'Radius': [100, 200, 300, 400, 500],\n    'Covariance': [1, 2, 3, 4, 5],\n    'Variance': [0.1, 0.2, 0.3, 0.4, 0.5],\n    'Weight': [1, 2, 3, 4, 5]\n}\n\n# Convert to DataFrame\nnew_data = pd.DataFrame(data)\n\n# Save to CSV (if needed)\nnew_data.to_csv('synthetic_iot_intrusion_corrected.csv', index=False)\n\n# Debugging: Print the new data to verify\nprint(\"New data with correct feature names:\")\nprint(new_data.head())\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport joblib\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Step 1: Load the Trained Model\nmodel_path = 'rf_intrusion_detection_model.pkl'\n\ntry:\n    rf_model = joblib.load(model_path)\n    print(f\"Model loaded successfully from {model_path}\")\nexcept FileNotFoundError:\n    print(f\"Model file not found at {model_path}. Please check the file path.\")\n    raise\n\n# Step 2: Load New Data\n# Update this path to the correct path of your new data file\nnew_data_path = '/kaggle/input/new-test-data/synthetic_iot_intrusion_corrected.csv'\n\ntry:\n    new_data = pd.read_csv(new_data_path)\n    print(f\"New data loaded successfully from {new_data_path}\")\nexcept FileNotFoundError:\n    print(f\"New data file not found at {new_data_path}. Please check the file path.\")\n    raise\n\n# Step 3: Align Columns with Model\n# Get feature names from the model\nmodel_feature_names = rf_model.feature_names_in_\n\n# Debugging: Print the model's expected feature names\nprint(\"Model's expected feature names:\")\nprint(model_feature_names)\n\n# Debugging: Print the new data columns\nprint(\"New data columns:\")\nprint(new_data.columns)\n\n# Ensure new data has the same columns in the same order\nexpected_columns = model_feature_names.tolist()  # Convert to list\n\n# Check and reorder columns if all expected columns are present\nif all(column in new_data.columns for column in expected_columns):\n    new_data = new_data[expected_columns]\nelse:\n    print(\"The new data does not contain all expected columns. Please check the new data.\")\n    raise ValueError(\"Column mismatch between new data and model.\")\n\n# Debugging: Print the new data to verify columns\nprint(\"New data with aligned columns:\")\nprint(new_data.head())\n\n# Step 4: Prepare New Data\ndef prepare_new_data(data):\n    # Debugging: Print the first few rows of the data to verify\n    print(\"New data before preprocessing:\")\n    print(data.head())\n    \n    # Example preprocessing: handle missing values\n    data = data.dropna()\n    \n    # Debugging: Print the data shape after preprocessing\n    print(\"New data shape after preprocessing:\")\n    print(data.shape)\n    \n    return data\n\n# Debugging: Print the new data before preprocessing\nprint(\"New data before prediction:\")\nprint(new_data)\n\n# Prepare new data\nprepared_data = prepare_new_data(new_data)\n\n# Debugging: Print the prepared data\nprint(\"Prepared data:\")\nprint(prepared_data)\n\n# Step 5: Make Predictions\ntry:\n    predictions = rf_model.predict(prepared_data)\n    print(\"Predictions made successfully.\")\nexcept Exception as e:\n    print(f\"Error during prediction: {e}\")\n    raise\n\n# Debugging: Print the predictions\nprint(\"Predictions:\")\nprint(predictions)\n\n# Optional: If you have the true labels for new data, evaluate the predictions\n# Assuming you have true labels in `true_labels`\n# true_labels = [actual_label]  # Replace with actual labels if available\n\n# Step 6: Evaluate Predictions (if true labels are available)\n# if 'true_labels' in locals():\n#     accuracy = accuracy_score(true_labels, predictions)\n#     print(f'Accuracy: {accuracy:.2f}')\n#     print(classification_report(true_labels, predictions))\n    \n#     # Confusion Matrix\n#     cm = confusion_matrix(true_labels, predictions, labels=rf_model.classes_)\n#     plt.figure(figsize=(10, 7))\n#     sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=rf_model.classes_, yticklabels=rf_model.classes_)\n#     plt.xlabel('Predicted')\n#     plt.ylabel('Actual')\n#     plt.title('Confusion Matrix')\n#     plt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}